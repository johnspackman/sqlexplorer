<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="net.sourceforge.sqlexplorer">
<annotation>
      <appInfo>
         <meta.schema plugin="net.sourceforge.sqlexplorer" id="product" name="Database Product"/>
      </appInfo>
      <documentation>
         Define the implementation of DatabaseProduct to use for a specific database product. If no class is defined DefaultDatabaseProduct will be used.
      </documentation>
   </annotation>

   <element name="databaseProduct">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  A fully qualified name of a class which implements &lt;samp&gt;net.sourceforge.sqlexplorer.dbproduct.DatabaseProduct&lt;/samp&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":net.sourceforge.sqlexplorer.dbproduct.DatabaseProduct"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="database-product-name" type="string" use="required">
            <annotation>
               <documentation>
                  Name of database for which this implementation is valid as seen in the Database Product Name property in the Connection Info view.  &apos;*&apos; can be used as a wildcard.  Use a comma seperated list to specify multiple databases.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="databaseProduct"/>
         </sequence>
         <attribute name="point" type="string">
            <annotation>
               <documentation>
                  A fully qualified identifier of the target extension point.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  An optional identifier of the extension instance.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  An optional name of the extension instance.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         version 3.5.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;code&gt;&lt;pre&gt;
package net.sourceforge.sqlexplorer.sybase.dbproduct;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import net.sourceforge.sqlexplorer.dbproduct.DefaultDatabaseProduct;
import net.sourceforge.sqlexplorer.plugin.SQLExplorerPlugin;

/**
 * @author Heiko
 *
 */
public class DatabaseProduct extends DefaultDatabaseProduct {

	@Override
	public String describeConnection(Connection connection) throws SQLException {
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			stmt = connection.prepareStatement(&quot;SELECT @@SPID as SID&quot;);
			rs = stmt.executeQuery();
			rs.next();
			return &quot;SID: &quot; + rs.getString(&quot;SID&quot;);
		}catch (SQLException e) {
			SQLExplorerPlugin.error(e);
			return super.describeConnection(connection);
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch(SQLException e) {
				}
			if (stmt != null)
				try {
					stmt.close();
				} catch(SQLException e) {
				}
		}
	}

	@Override
	public String getCurrentCatalog(Connection connection) throws SQLException {
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			stmt = connection.prepareStatement(&quot;SELECT db_name() as DB&quot;);
			rs = stmt.executeQuery();
			rs.next();
			return rs.getString(&quot;DB&quot;);
		}catch (SQLException e) {
			SQLExplorerPlugin.error(e);
			return super.describeConnection(connection);
		} finally {
			if (rs != null)
				try {
					rs.close();
				} catch(SQLException e) {
				}
			if (stmt != null)
				try {
					stmt.close();
				} catch(SQLException e) {
				}
		}
	}

}

&lt;/pre&gt;&lt;/code&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         None.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         (c) Heiko Hilbert, 2009, All rights reserved.
      </documentation>
   </annotation>

</schema>
